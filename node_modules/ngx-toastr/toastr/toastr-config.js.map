{"version":3,"sources":["../../../src/lib/toastr/toastr-config.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AA8GvC;;GAEG;AACH;IAIE,sBACS,OAAe,EACf,MAAwB,EACxB,OAA6C,EAC7C,KAAyB,EACzB,SAAiB,EACjB,QAAuB;QALvB,YAAO,GAAP,OAAO,CAAQ;QACf,WAAM,GAAN,MAAM,CAAkB;QACxB,YAAO,GAAP,OAAO,CAAsC;QAC7C,UAAK,GAAL,KAAK,CAAoB;QACzB,cAAS,GAAT,SAAS,CAAQ;QACjB,aAAQ,GAAR,QAAQ,CAAe;QATxB,WAAM,GAAiB,IAAI,OAAO,EAAE,CAAC;QACrC,cAAS,GAAiB,IAAI,OAAO,EAAE,CAAC;IAS5C,CAAC;IAEL,qBAAqB;IACrB,iCAAU,GAAV;QACE,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC;IAED,4BAAK,GAAL;QACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;IACpC,CAAC;IAED,wCAAwC;IACxC,oCAAa,GAAb,UAAc,MAAY;QACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC5B,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;IAC5B,CAAC;IAED,+BAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;IACvC,CAAC;IAEH,mBAAC;AAAD,CAjCA,AAiCC,IAAA","file":"toastr-config.js","sourceRoot":"","sourcesContent":["import { SafeHtml } from '@angular/platform-browser';\n\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\n\nimport { ComponentType } from '../portal/portal';\nimport { Toast } from './toast-component';\nimport { ToastRef } from './toast-injector';\n\n/**\n * Configuration for an individual toast.\n */\n export interface IndividualConfig {\n  /**\n  * toast time to live in milliseconds\n  * default: 5000\n  */\n  timeOut?: number;\n  /**\n  * toast show close button\n  * default: false\n  */\n  closeButton?: boolean;\n  /** time to close after a user hovers over toast */\n  /**\n   * show toast progress bar\n   * default: false\n   */\n  extendedTimeOut?: number;\n  /**\n   * show toast progress bar\n   * default: false\n   */\n  progressBar?: boolean;\n  /**\n   * render html in toast message (possibly unsafe)\n   * default: false\n   */\n  enableHtml?: boolean;\n  /**\n   * css class on toast component\n   * default: toast\n   */\n  toastClass?: string;\n  /**\n   * css class on toast container\n   * default: toast-top-right\n   */\n  positionClass?: string;\n  /**\n   * css class on to toast title\n   * default: toast-title\n   */\n  titleClass?: string;\n  /**\n   * css class on to toast title\n   * default: toast-title\n   */\n  messageClass?: string;\n  /**\n   * clicking on toast dismisses it\n   * default: true\n   */\n  tapToDismiss?: boolean;\n  /**\n   * Angular toast component to be shown\n   * default: Toast\n   */\n  toastComponent?: ComponentType<any>;\n  /**\n   * Helps show toast from a websocket or from event outside Angular\n   * default: false\n   */\n  onActivateTick?: boolean;\n}\n\nexport interface ToastrIconClasses {\n  error?: string;\n  info?: string;\n  success?: string;\n  warning?: string;\n}\n\n/**\n * Global Toast configuration\n * Includes all IndividualConfig\n */\nexport interface GlobalConfig extends IndividualConfig {\n  /**\n   * max toasts opened. Toasts will be queued\n   * Zero is unlimited\n   * default: 0\n   */\n  maxOpened?: number;\n  /**\n   * dismiss current toast when max is reached\n   * default: false\n   */\n  autoDismiss?: boolean;\n  iconClasses?: ToastrIconClasses;\n  /**\n   * New toast placement\n   * default: true\n   */\n  newestOnTop?: boolean;\n  /**\n   * block duplicate messages\n   * default: false\n   */\n  preventDuplicates?: boolean;\n}\n\n/**\n * Everything a toast needs to launch\n */\nexport class ToastPackage {\n  private _onTap: Subject<any> = new Subject();\n  private _onAction: Subject<any> = new Subject();\n\n  constructor(\n    public toastId: number,\n    public config: IndividualConfig,\n    public message: string | SafeHtml | null | undefined,\n    public title: string | undefined,\n    public toastType: string,\n    public toastRef: ToastRef<any>,\n  ) { }\n\n  /** Fired on click */\n  triggerTap() {\n    this._onTap.next();\n    this._onTap.complete();\n  }\n\n  onTap(): Observable<any> {\n    return this._onTap.asObservable();\n  }\n\n  /** available for use in custom toast */\n  triggerAction(action?: any) {\n    this._onAction.next(action);\n    this._onAction.complete();\n  }\n\n  onAction(): Observable<any> {\n    return this._onAction.asObservable();\n  }\n\n}\n\n/* tslint:disable:no-empty-interface */\nexport interface GlobalToastrConfig extends GlobalConfig {}\nexport interface IndividualToastrConfig extends IndividualConfig {}\nexport interface ToastrConfig extends IndividualConfig {}\n"]}